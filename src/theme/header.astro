---
//@ts-ignore
import X from "astro-xelement"

const {A, Div, I, Header} = X

const nav = [
	["Home", "/", "#0450b4", "house"],
	["Blog", "/news", "#b4418e", "newspaper"],
	["About me", "/about", "#ea515f", "info-square"],
]

const {page} = Astro.props

---
<X 
	@is="meta" 
	@do={(_, store) => {

		// Main navigation logic
		// Other elements can "subscribe" to the navigation event with
		// store.onNavigate( function ) where the callback param is the location index

		store.$$navListeners = []
		store.onNavigate = (ev) => store.$$navListeners.push(ev)

		store.navElements = nav
		store.currentPage = page

		store.navigate = (pageIndex) => {
			store.$$navListeners.map(x => x(pageIndex))
			store.currentPage = pageIndex
		}
	}} 
	define:vars={{nav, page}}
/>
<Div 
	class="transition-overlay"
	@do={(el, store) => {
		store.$$animateOverlay = (ev) => {

			clearInterval(store.$$animateTimeout)

			el.style.setProperty("--mx", `${ev.clientX}px`)
			el.style.setProperty("--my", `${ev.clientY}px`)

			el.classList.add("transition")

			store.$$animateTimeout = setTimeout(() => el.classList.remove("transition"), 2000)
		}
	}}
/>
<Header
	@do={(el, store)=>{
		store.onNavigate((i) => {

			let page = store.navElements[i]

			el.style.setProperty("--transition-header-color", page[2])
			el.classList.add("transition")

			setTimeout(() => {
				el.style.setProperty("--header-col", page[2])
				el.classList.remove("transition")
			}, 350);

		})
	}}
	class=""
	style={`--header-col: ${nav[page][2]};`}
>
	<nav>
		<ul class="navigation">
			{nav.map((entry, i) => (
				<li>
					<A
						href={entry[1]}
						define:vars={{page: entry, i}}
						@click={(ev, store) => {
							ev.preventDefault()
							if (store.currentPage == i) return
							ev.target.classList.add("clicked")
							
							// Run the navigation routine
							store.navigate(i)
							// Animate a transition overlay over the content
							store.$$animateOverlay(ev)

							// actually navigate
							setTimeout(() => location.href=ev.target.href, 300)
						}}
						style={`--theme-col: ${entry[2]}`}
					>{entry[0]}</A>
				</li>
			))}
		</ul>
		<Div 
			class="current"
			@do={(el, store) => {
				store.activeCol = "#fff"
				store.onNavigate((i) => {
					let page = store.navElements[i]
					el.style.setProperty("--col", page[2])
					el.style.setProperty("--rot", `${i*90+45}deg`)
				})
			}}
			style={`--col: ${nav[page][2]}; --rot: ${page*90+45}deg`}
		>
			{nav.map((entry, i) => (
				<I 
					define:vars={{i}}
					@do={(el, store) => {
						store.onNavigate((targetI) => {
							el.style.opacity = i==targetI?1:0
						})
					}}
					class={`bi bi-${entry[3]}`}
					style={`transform: rotate(${(i*90+45)*-1}deg); opacity: ${page==i?1:0};`}
				></I>
			))}
		</Div>
	</nav>
</Header>

<style lang="sass">
	header
		--header-height: 3rem
		--nav-height: 3rem
		height: var(--header-height)
		background: var(--header-col, #aaa)
		margin-bottom: 4.2rem
		position: sticky
		top: 0
		z-index: 2
		&.transition
			&::before
				position: absolute
				width: 100vw
				height: var(--header-height)
				display: block
				content: ""
				z-index: 1
				background: var(--transition-header-color, #aaa)
				animation: headerTransition 0.3s normal forwards ease-in-out
			a
				background: transparent!important
		@media screen and (max-width: calc( 2 * 20rem + 8.4rem ))
				--header-height: 6rem

		nav
			height: var(--header-height)
			display: grid
			grid-template-columns: minmax(20rem, 1fr) 8.4rem minmax(20rem, 1fr)
			z-index: 2
			position: relative
			@media screen and (max-width: calc( 2 * 20rem + 8.4rem ))
				grid-template-columns: 1fr
				grid-template-rows: var(--nav-height) calc( var(--header-height) - var(--nav-height) )
			div.current
				position: relative
				background: var(--col)
				transform: rotate(var(--rot))
				height: 6rem
				width: 6rem
				transition: background 0.1s, transform 0.3s
				justify-self: center
				position: relative
				z-index: -1
				.bi
					position: absolute
					top: 0
					left: 0
					display: block
					width: 6rem
					height: 6rem
					line-height: 6rem
					font-size: 3rem
					text-align: center
					transition: opacity 0.1s
					color: white
				

	ul
		margin: 0
		padding: 0
		display: grid
		align-items: center
		grid-template-columns: 1fr 1fr 1fr
		height: var(--nav-height)
		li
			display: inline
			text-align: center
			height: 100%
			a
				display: block
				width: 100%
				height: 100%
				line-height: var(--nav-height)
				font-size: 1.5rem
				font-family: 'Bungee'
				text-decoration: none
				color: white
				transition: background 0.1s
				white-space: nowrap
				&:hover
					background: var(--theme-col)

	div.transition-overlay
		position: absolute
		top: 0
		left: 0
		background: #fff
		width: 100vw
		height: 100vh
		opacity: 0
		z-index: 1
		pointer-events: none
		&.transition
			animation: bodyTransition 1.5s normal forwards linear

	
	@keyframes headerTransition
		0%
			clip-path: circle(0px at center bottom)
		100%
			clip-path: circle(50vw at center bottom)

	@keyframes bodyTransition
		0%
			clip-path: circle(0px at top center )
			opacity: 1
		25%
			clip-path: circle( max(150vw, 150vh) at top center )
			opacity: 1
		75%
			opacity: 1
		100%
			opacity: 0


</style>